/*
 * Copyright (c) 2017.
 * Distributed under the GNU GPLv3 by David Whitman.
 * https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This source code is made available to help others learn. Please don't clone my app.
 */

buildscript {
    repositories {
        maven { url "http://maven.fabric.io/public" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'jacoco-android'

android {
    def BOOLEAN = "boolean"
    def TRUE = "true"
    def FALSE = "false"
    def CRASHLYTICS = "enableCrashlytics"
    def TRACE = "enableTrace"

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.thunderclouddev.changelogs"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    signingConfigs {
        // Debug keystore keeps signature consistent across CI builds
        debug {
            storeFile file("debugKeystore.jks")
            keyAlias "changelogsForAndroidDebug"
            storePassword "debugPassword"
            keyPassword "debugPassword"
        }

        release {
            storeFile file("releaseKeystore.jks")
            keyAlias "changelogsForAndroidRelease"
            storePassword System.getenv("CHANGELOGS_STORE_PWD")
            keyPassword System.getenv("CHANGELOGS_KEY_PWD")
        }
    }
    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            testCoverageEnabled false
            signingConfig signingConfigs.debug
            buildConfigField BOOLEAN, CRASHLYTICS, FALSE
            buildConfigField BOOLEAN, TRACE, FALSE
        }
        ci {
            minifyEnabled true
            shrinkResources true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField BOOLEAN, TRACE, FALSE
            dexOptions.preDexLibraries = false
        }
        alpha {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField BOOLEAN, TRACE, FALSE
        }
        beta {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField BOOLEAN, TRACE, FALSE
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField BOOLEAN, TRACE, FALSE
        }
    }

    flavorDimensions "fossness"

    productFlavors {
        pure {
            buildConfigField BOOLEAN, CRASHLYTICS, FALSE
            dimension "fossness"
        }

        dist {
            buildConfigField BOOLEAN, CRASHLYTICS, TRUE
            dimension "fossness"
        }
    }

    configurations {
        distDebugCompile {}
        distCiCompile {}
        distAlphaCompile {}
        distBetaCompile {}
        distReleaseCompile {}
    }

    flavorSelection 'fossness', 'dist'

    dataBinding.enabled = true
    kotlin { experimental { coroutines 'enable' } }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':utils')
    implementation project(':dataprovider')

    implementation libraries.appcompat
    implementation libraries.supportLib
    implementation libraries.supportDesignLib
    implementation libraries.supportPreferenceLib
    implementation libraries.constraintLayout
    implementation libraries.kotlin
    implementation libraries.kotlinCoroutines
    implementation libraries.rxrelay
    implementation libraries.rxjava
    implementation libraries.rxandroid
    implementation libraries.conductor
    implementation libraries.kotpref
    implementation libraries.picasso
    implementation libraries.timber
    implementation libraries.dagger
    kapt libraries.daggerCompiler
    kapt libraries.databinding
    implementation libraries.playServices
    implementation libraries.powerAdapters
    implementation libraries.powerAdaptersData
    implementation libraries.powerAdaptersRecyclerView

    distImplementation libraries.stetho
    distImplementation(libraries.crashlytics) {
        transitive = true
    }

    debugImplementation libraries.leakCanary
    ciImplementation libraries.leakCanary
    alphaImplementation libraries.leakCanaryNoOp
    betaImplementation libraries.leakCanaryNoOp
    releaseImplementation libraries.leakCanaryNoOp
//    distCiImplementation libraries.leakCanary
//    distAlphaImplementation libraries.leakCanaryNoOp
//    distBetaImplementation libraries.leakCanaryNoOp
//    distReleaseImplementation libraries.leakCanaryNoOp

    testImplementation libraries.leakCanaryNoOp
    testImplementation libraries.junit

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

repositories {
    mavenCentral()
    maven { url "http://maven.fabric.io/public" }
}


task createMissingFabricFile {
    def prop = new Properties()
    def propFile = new File("${project.projectDir}/fabric.properties")
    println("Running createMissingFabricFile task")

    if (!propFile.exists()) {
        println("Creating file")
        propFile.createNewFile()
        prop.setProperty("apiKey", "00000000000000000000")
        prop.store(propFile.newWriter(), null)
    } else {
        println(propFile.toString() + " exists")
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompiler.dependsOn(createMissingFabricFile)
    }
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}