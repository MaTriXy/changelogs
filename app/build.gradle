/*
 * Copyright (c) 2017.
 * Distributed under the GNU GPLv3 by David Whitman.
 * https://www.gnu.org/licenses/gpl-3.0.en.html
 *
 * This source code is made available to help others learn. Please don't clone my app.
 */

buildscript {
    repositories {
        maven { url "http://maven.fabric.io/public" }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.22.1'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'jacoco-android'

android {
    def BOOLEAN = "boolean"
    def TRUE = "true"
    def FALSE = "false"
    def CRASHLYTICS = "enableCrashlytics"
    def TRACE = "enableTrace"

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId "com.thunderclouddev.changelogs"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    signingConfigs {
        // Debug keystore keeps signature consistent across CI builds
        debug {
            storeFile file("debugKeystore.jks")
            keyAlias "changelogsForAndroidDebug"
            storePassword "debugPassword"
            keyPassword "debugPassword"
        }

        release {
            storeFile file("releaseKeystore.jks")
            keyAlias "changelogsForAndroidRelease"
            storePassword System.getenv("CHANGELOGS_STORE_PWD")
            keyPassword System.getenv("CHANGELOGS_KEY_PWD")
        }
    }
    buildTypes {

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            minifyEnabled false
            testCoverageEnabled true
            signingConfig signingConfigs.debug
            buildConfigField BOOLEAN, CRASHLYTICS, FALSE
            buildConfigField BOOLEAN, TRACE, FALSE
        }
        ci {
            minifyEnabled true
            shrinkResources true
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            buildConfigField BOOLEAN, TRACE, FALSE
        }
        alpha {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField BOOLEAN, TRACE, FALSE
        }
        beta {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField BOOLEAN, TRACE, FALSE
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField BOOLEAN, TRACE, FALSE
        }
    }

    productFlavors {
        pure {
            buildConfigField BOOLEAN, CRASHLYTICS, FALSE
        }

        dist {
            buildConfigField BOOLEAN, CRASHLYTICS, TRUE
        }
    }

    dataBinding.enabled = true
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':utils')
    compile project(':dataprovider')

    compile libraries.appcompat
    compile libraries.supportLib
    compile libraries.supportDesignLib
    compile libraries.supportPreferenceLib
    compile libraries.constraintLayout
    compile libraries.kotlin
    compile libraries.rxrelay
    compile libraries.rxjava
    compile libraries.conductor
    compile libraries.kotpref
    compile libraries.picasso
    compile libraries.timber
    compile libraries.dagger
    kapt libraries.daggerCompiler
    kapt libraries.databinding
    compile libraries.playServices

    distCompile libraries.stetho
    distCompile(libraries.crashlytics) {
        transitive = true
    }

    testCompile libraries.junit

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

repositories {
    mavenCentral()
    maven { url "http://maven.fabric.io/public" }
}


task createMissingFabricFile {
    def prop = new Properties()
    def propFile = new File("${project.projectDir}/fabric.properties")
    println("Running createMissingFabricFile task")

    if (!propFile.exists()) {
        println("Creating file")
        propFile.createNewFile()
        prop.setProperty("apiKey", "00000000000000000000")
        prop.store(propFile.newWriter(), null)
    } else {
        println(propFile.toString() + " exists")
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.javaCompiler.dependsOn(createMissingFabricFile)
    }
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}